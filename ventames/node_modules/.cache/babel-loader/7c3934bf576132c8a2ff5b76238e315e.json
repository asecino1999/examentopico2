{"ast":null,"code":"var _jsxFileName = \"/home/gerald/ingeSofware/topico/vier_27_sep/ventames/src/App.tsx\";\nimport React from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport * as ventas from './ventas';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    var separar_ventas4 = /([a-zA-Z]*)(:)?(\\\t|\\ )*(s|S)\\/.(\\ )*[0-9]+(\\,[0-9]*)*(\\.[0-9]*)*/;\n    separar_ventas4 = new RegExp(separar_ventas4, \"\\g\");\n    var cadenas = ventas.texto.match(separar_ventas4) || [];\n    var meses = [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"];\n    var valores = meses.map(element => {\n      return {\n        mes: element,\n        val: 0\n      };\n    });\n    var separar_numero = /[0-9]+(\\,[0-9]*)*(\\.[0-9]*)*/;\n    valores.forEach(ele => {\n      var delMes = cadenas.map(element => {\n        console.log(element, ele.mes, element.toLowerCase(), element.toLowerCase().indexOf(ele.mes));\n\n        if (element.toLowerCase().indexOf(ele.mes) > 0) {\n          var numeroNul = element.match(separar_numero);\n          var numero;\n\n          if (numeroNul) {\n            numero = numeroNul[0];\n          } else numero = \"0\";\n\n          console.log(ele, numero);\n          return parseFloat(numero);\n        } else {\n          return 0;\n        }\n      });\n      ele.val = delMes.reduce((a, b) => a + b);\n    });\n    console.log(valores);\n    this.state = {\n      valores: ventas.texto,\n      separar_ventas: \"\"\n    };\n  }\n\n  render() {\n    console.log(this.state.separar_ventas);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.separar_ventas);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gerald/ingeSofware/topico/vier_27_sep/ventames/src/App.tsx"],"names":["React","ventas","App","Component","constructor","props","separar_ventas4","RegExp","cadenas","texto","match","meses","valores","map","element","mes","val","separar_numero","forEach","ele","delMes","console","log","toLowerCase","indexOf","numeroNul","numero","parseFloat","reduce","a","b","state","separar_ventas","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;;AASA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AACA,QAAIC,eAAuB,GAAG,kEAA9B;AACAA,IAAAA,eAAe,GAAG,IAAIC,MAAJ,CAAWD,eAAX,EAA4B,IAA5B,CAAlB;AAEA,QAAIE,OAAiB,GAAGP,MAAM,CAACQ,KAAP,CAAaC,KAAb,CAAmBJ,eAAnB,KAAuC,EAA/D;AACA,QAAIK,KAAe,GAAG,CACpB,OADoB,EAEpB,SAFoB,EAGpB,OAHoB,EAIpB,OAJoB,EAKpB,MALoB,EAMpB,OANoB,EAOpB,OAPoB,EAQpB,QARoB,EASpB,YAToB,EAUpB,SAVoB,EAWpB,WAXoB,EAYpB,WAZoB,CAAtB;AAcA,QAAIC,OAAiB,GAAGD,KAAK,CAACE,GAAN,CAAWC,OAAD,IAAqB;AACrD,aAAO;AAAEC,QAAAA,GAAG,EAAED,OAAP;AAAgBE,QAAAA,GAAG,EAAE;AAArB,OAAP;AACD,KAFuB,CAAxB;AAGA,QAAIC,cAAsB,GAAG,8BAA7B;AACAL,IAAAA,OAAO,CAACM,OAAR,CAAgBC,GAAG,IAAI;AAErB,UAAIC,MAAM,GAAGZ,OAAO,CAACK,GAAR,CAAaC,OAAD,IAAqB;AAC5CO,QAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ,EAAoBK,GAAG,CAACJ,GAAxB,EAA4BD,OAAO,CAACS,WAAR,EAA5B,EAAkDT,OAAO,CAACS,WAAR,GAAsBC,OAAtB,CAA8BL,GAAG,CAACJ,GAAlC,CAAlD;;AACA,YAAID,OAAO,CAACS,WAAR,GAAsBC,OAAtB,CAA8BL,GAAG,CAACJ,GAAlC,IAAuC,CAA3C,EAA8C;AAC5C,cAAIU,SAAS,GAAGX,OAAO,CAACJ,KAAR,CAAcO,cAAd,CAAhB;AACA,cAAIS,MAAJ;;AACA,cAAID,SAAJ,EAAe;AACbC,YAAAA,MAAM,GAAGD,SAAS,CAAC,CAAD,CAAlB;AACD,WAFD,MAGEC,MAAM,GAAG,GAAT;;AACFL,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBO,MAAjB;AACA,iBAAOC,UAAU,CAACD,MAAD,CAAjB;AACD,SATD,MAUK;AACH,iBAAO,CAAP;AACD;AACF,OAfY,CAAb;AAgBAP,MAAAA,GAAG,CAACH,GAAJ,GAAUI,MAAM,CAACQ,MAAP,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA5B,CAAV;AACD,KAnBD;AAoBAT,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,SAAKmB,KAAL,GAAa;AACXnB,MAAAA,OAAO,EAAEX,MAAM,CAACQ,KADL;AAEXuB,MAAAA,cAAc,EAAE;AAFL,KAAb;AAMD;;AACDC,EAAAA,MAAM,GAAG;AACPZ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,KAAL,CAAWC,cAAvB;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,KAAKD,KAAL,CAAWC,cADN,CAAR;AAID;;AA3D2C;;AA8D9C,eAAe9B,GAAf","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport * as ventas from './ventas';\ninterface IState {\n  valores: string | string[],\n  separar_ventas: any;\n}\ninterface mesVal {\n  mes: string,\n  val: number\n}\nclass App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props);\n    var separar_ventas4: RegExp = /([a-zA-Z]*)(:)?(\\\t|\\ )*(s|S)\\/.(\\ )*[0-9]+(\\,[0-9]*)*(\\.[0-9]*)*/\n    separar_ventas4 = new RegExp(separar_ventas4, \"\\g\")\n\n    var cadenas: string[] = ventas.texto.match(separar_ventas4) || []\n    var meses: string[] = [\n      \"enero\",\n      \"febrero\",\n      \"marzo\",\n      \"abril\",\n      \"mayo\",\n      \"junio\",\n      \"julio\",\n      \"agosto\",\n      \"septiembre\",\n      \"octubre\",\n      \"noviembre\",\n      \"diciembre\",\n    ]\n    var valores: mesVal[] = meses.map((element): mesVal => {\n      return { mes: element, val: 0 };\n    });\n    var separar_numero: RegExp = /[0-9]+(\\,[0-9]*)*(\\.[0-9]*)*/\n    valores.forEach(ele => {\n\n      var delMes = cadenas.map((element): number => {\n        console.log(element,ele.mes,element.toLowerCase(),element.toLowerCase().indexOf(ele.mes))\n        if (element.toLowerCase().indexOf(ele.mes)>0) {\n          var numeroNul = element.match(separar_numero)\n          var numero\n          if (numeroNul) {\n            numero = numeroNul[0]\n          } else\n            numero = \"0\"\n          console.log(ele, numero)\n          return parseFloat(numero)\n        }\n        else {\n          return 0\n        }\n      });\n      ele.val = delMes.reduce((a, b) => a + b)\n    });\n    console.log(valores)\n    this.state = {\n      valores: ventas.texto,\n      separar_ventas: \"\"\n\n    }\n\n  }\n  render() {\n    console.log(this.state.separar_ventas)\n    return (<div>\n      {this.state.separar_ventas}\n\n    </div>)\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}